services:
  db:
    image: postgres:12
    container_name: tp-api-db
    restart: always
    networks:
      - tp-backend-net
#    logging:
#      driver: loki
#      options:
#        loki-url: "http://127.0.0.1:3100/loki/api/v1/push"
#        loki-retries: "5"
#        loki-batch-size: "100"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}
    ports:
      - '5432:5432'

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:latest
    networks:
      - tp-backend-net
    env_file:
      - .env
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "5050:80"
    restart: always

  prestart:
    image: '${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}'
    build:
      context: ./backend
    depends_on:
      db:
        condition: service_healthy
        restart: true
    command: bash scripts/prestart.sh
    networks:
      - tp-backend-net
    env_file:
      - .env
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}

  backend:
    image: '${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}'
    container_name: tp-api-backend
    restart: always
    networks:
      - tp-backend-net
#      - traefik
    depends_on:
      db:
        condition: service_healthy
        restart: true
      prestart:
        condition: service_completed_successfully
    env_file:
      - .env
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
    ports:
      - "8012:8012"
#    logging:
#      driver: loki
#      options:
#        loki-url: "http://127.0.0.1:3100/loki/api/v1/push"
#        loki-retries: "5"
#        loki-batch-size: "100"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8012/api/v1/ticketpilot/health-check/" ]
      interval: 10s
      timeout: 5s
      retries: 5

#    labels:
#      # The labels are usefull for Traefik only
#      - "traefik.enable=true"
#      - "traefik.docker.network=traefik"
#      - "traefik.http.services.${traefik_servicename}.loadbalancer.server.port=${application_port}"
#      # Get the routes from http
#      - "traefik.http.routers.${traefik_servicename}.rule=Host(`${hostname}`)"
#      - "traefik.http.routers.${traefik_servicename}.entrypoints=web"
#      # Redirect these routes to https
#      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
#      - "traefik.http.routers.${traefik_servicename}.middlewares=redirect-to-https@docker"
#      # Get the routes from https
#      - "traefik.http.routers.${traefik_servicename}-secured.rule=Host(`${hostname}`)"
#      - "traefik.http.routers.${traefik_servicename}-secured.entrypoints=web-secure"
#      # Apply autentificiation with http challenge
#      - "traefik.http.routers.${traefik_servicename}-secured.tls=true"
#      - "traefik.http.routers.${traefik_servicename}-secured.tls.certresolver=myhttpchallenge"
#      # Set secure Cookie Settings
#      - "traefik.http.services.${traefik_servicename}.loadbalancer.sticky=true"
#      - "traefik.http.services.${traefik_servicename}.loadbalancer.sticky.cookie.secure=true"
#      - "traefik.http.services.${traefik_servicename}.loadbalancer.sticky.cookie.httpOnly=true"
#      - "traefik.http.services.${traefik_servicename}.loadbalancer.sticky.cookie.sameSite=strict"
#      #Secure Header Options
#      - "traefik.http.middlewares.${traefik_servicename}headers.headers.stsincludesubdomains=true"
#      - "traefik.http.middlewares.${traefik_servicename}headers.headers.stspreload=true"
#      - "traefik.http.middlewares.${traefik_servicename}headers.headers.stsseconds=31536000"
#      - "traefik.http.routers.${traefik_servicename}-secured.middlewares=${traefik_servicename}headers"
#      - "traefik.http.middlewares.${traefik_servicename}headers.headers.accesscontrolallowmethods=GET,OPTIONS,PUT"
#      - "traefik.http.middlewares.${traefik_servicename}headers.headers.accesscontrolmaxage=100"
#      - "traefik.http.middlewares.${traefik_servicename}headers.headers.addvaryheader=true"
#      - "traefik.http.middlewares.${traefik_servicename}headers.headers.framedeny=true"
#      - "traefik.http.middlewares.${traefik_servicename}headers.headers.browserXssFilter=true"
#      - "traefik.http.middlewares.${traefik_servicename}headers.headers.contentTypeNosniff=true"
#      - "traefik.http.middlewares.${traefik_servicename}headers.headers.referrerPolicy=same-origin"
#      - "traefik.http.middlewares.${traefik_servicename}headers.headers.permissionsPolicy=geolocation=(self), microphone=(), camera=(), fullscreen=*"
#

volumes:
  app-db-data:

networks:
  tp-backend-net:
    name: tp-backend-net
#  traefik:
#    external: true
